%%
%% Autogenerated by Thrift Compiler (0.14.1)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(data_service_thrift).
-behaviour(thrift_service).


-include("data_service_thrift.hrl").

-export([struct_info/1, function_info/2, function_names/0]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% language_index(This)
function_info('language_index', params_type) ->
  {struct, []}
;
function_info('language_index', reply_type) ->
  {list, {struct, {'language_types', 'astraea.thrift.data.Language'}}};
function_info('language_index', exceptions) ->
  {struct, [{1, {struct, {'error_types', 'astraea.thrift.Error'}}}]}
;
% language_show(This, Id)
function_info('language_show', params_type) ->
  {struct, [{1, string}]}
;
function_info('language_show', reply_type) ->
  {struct, {'language_types', 'astraea.thrift.data.Language'}};
function_info('language_show', exceptions) ->
  {struct, [{1, {struct, {'error_types', 'astraea.thrift.Error'}}}]}
;
% language_create(This, Language)
function_info('language_create', params_type) ->
  {struct, [{1, {struct, {'language_types', 'astraea.thrift.data.Language'}}}]}
;
function_info('language_create', reply_type) ->
  {struct, []};
function_info('language_create', exceptions) ->
  {struct, [{1, {struct, {'error_types', 'astraea.thrift.Error'}}}]}
;
% language_update(This, Language)
function_info('language_update', params_type) ->
  {struct, [{1, {struct, {'language_types', 'astraea.thrift.data.Language'}}}]}
;
function_info('language_update', reply_type) ->
  {struct, []};
function_info('language_update', exceptions) ->
  {struct, [{1, {struct, {'error_types', 'astraea.thrift.Error'}}}]}
;
% language_delete(This, Id)
function_info('language_delete', params_type) ->
  {struct, [{1, string}]}
;
function_info('language_delete', reply_type) ->
  {struct, []};
function_info('language_delete', exceptions) ->
  {struct, [{1, {struct, {'error_types', 'astraea.thrift.Error'}}}]}
;
% get_language_script(This, Id)
function_info('get_language_script', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_language_script', reply_type) ->
  {struct, {'language_types', 'astraea.thrift.data.Language'}};
function_info('get_language_script', exceptions) ->
  {struct, [{1, {struct, {'error_types', 'astraea.thrift.Error'}}}]}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

function_names() -> 
  ['language_index', 'language_show', 'language_create', 'language_update', 'language_delete', 'get_language_script'].

